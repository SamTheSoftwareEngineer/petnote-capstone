@url = http://localhost:8080/api/user
@baseurl = http://localhost:8080/api
# happy path
POST {{url}}
Content-Type: application/json

{
    "username": "Samaira",
    "email": "test@test.com",
    "password": "password"
}

###

#unhappy path --> duplicate email
POST {{url}}
Content-Type: application/json

{
    "username": "test user 1",
    "email": "testuser1@email.com",
    "password": "password"
}

###

#unhappy path --> username, password, and email are blank

POST {{url}}
Content-Type: application/json

{
    "username": "",
    "password": "",
    "email": ""
}

###

# happy path
POST {{url}}/authenticate
Content-Type: application/json

{
    "username": "user1",
    "password": "password123"
}

###

# user not found
POST {{url}}/authenticate
Content-Type: application/json

{
    "username": "zzzz",
    "password": "password"
}

###

# incorrect password
POST {{url}}/authenticate
Content-Type: application/json

{
    "username": "user1",
    "password": "wrongPassword"
}

###

# Create pet happy path
POST {{baseurl}}/pet
Content-Type: application/json

{
  "userId": 1,
  "petName": "Buddy",
  "species": "Dog",
  "breed": "Labrador"
}

###

# Create unhappy path --> missing name field
POST {{baseurl}}/pet
Content-Type: application/json

{
  "userId": 1,
  "species": "Dog"
}

###
# Get happy path
GET {{baseurl}}/pet/5

###
#Get unhappy path --> non-existent id
GET {{baseurl}}/pet/999

###
# Get pets by user id happy path

GET {{baseurl}}/pet/user/3

###
# Unhappy path (user exists but has no pets)
GET {{baseurl}}/pet/user/999

### 
# Update pet happy path 
PUT {{baseurl}}/pet/5
Content-Type: application/json

{
  "id": 5,
  "userId": 2,
  "petName": "Milo",
  "species": "Dog",
  "breed": "Golden Retriever"
}

###
#Update unhappy path -> ID mismatch
PUT {{baseurl}}/pet/5
Content-Type: application/json

{
  "id": 6,
  "userId": 1,
  "name": "Milo",
  "species": "Dog"
}

###
# Update unhappy path --> invalid data
PUT {{baseurl}}/pet/5
Content-Type: application/json

{
  "id": 5,
  "userId": 1
}

###
# Delete happy path
DELETE {{baseurl}}/pet/7

###
#Delete unhappy path --> non existent id
DELETE {{baseurl}}/pet/999


###

# Activity Controller HTTP requests

# Create happy path
POST http://localhost:8080/api/activities
Content-Type: application/json

{
  "activityDate": "2025-07-25T18:15:00",
  "activityName": "WALK",
  "petId": 6,
  "userId": 1,
  "completed": true
}




###

#Create unhappy path
POST http://localhost:8080/api/activities
Content-Type: application/json

{
  "activityDate": "2025-07-25T18:15:00",
  "activityName": "FEED",
  "petId": 6,
  "userId": 999, 
  "completed": true
}

###

#Get by id (happy path)

GET http://localhost:8080/api/activities/12

###
# Get by id unhappy path --> not found
GET http://localhost:8080/api/activities/999999


###
# List activities by pet (get all activities)

GET http://localhost:8080/api/activities/pet/4


###
# update happy path

PUT http://localhost:8080/api/activities/6
Content-Type: application/json

{
  "id": 6,
  "activityDate": "2025-07-25T18:45:00",
  "activityName": "WALK",
  "petId": 6,
  "userId": 1,
  "completed": true,
  "notes": "3 km this time"
}


###

# Unhappy update path --> id mismatch
PUT http://localhost:8080/api/activities/12
Content-Type: application/json

{
  "id": 99,  
  "activityDate": "2025-07-25T18:45:00",
  "activityName": "WALK",
  "petId": 4,
  "userId": 1,
  "completed": true
}

###
# Sample request to get all pet activities based on userId
GET http://localhost:8080/api/activities/user/4/pets-with-activities


###
# Delete happy path
DELETE http://localhost:8080/api/activities/6?userId=1

###
# Delete unhappy path
DELETE http://localhost:8080/api/activities/5?userId=999
